@page "/EditChart"

@inject BlitBot.Data.ChartService c
@inject SymbolSearchForm search

@using Blazored.Typeahead
@using System.Collections.Specialized
@using System.ComponentModel
@using Data

<PageTitle>BlitBot Config</PageTitle>

<h1>🤖 BlitBot Config</h1>
<hr/>
<EditForm Model="search" class="form-inline">
    <div class="row">
        <div class="col-auto">
            <label for="symbol">
                <small class="form-text text-muted">
                  Exchange and market to chart
                </small>
            </label>
            <BlazoredTypeahead id="symbol"  
                                class="form-control"
                                SearchMethod="search.SearchSymbols"
                                MaximumSuggestions="50" 
                                @bind-Value="c.config.Symbol">
                <SelectedTemplate Context="SymbolContext">
                    @SymbolContext.Exchange:@SymbolContext.Symbol
                </SelectedTemplate>
                <ResultTemplate Context="SymbolContext">
                    @SymbolContext.Exchange:@SymbolContext.Symbol (@SymbolContext.Description)
                </ResultTemplate>
            </BlazoredTypeahead>
            <div class="btn-group" role="group">
                <InputRadioGroup 
                    @bind-Value="search.SymbolType" 
                    class="form-control">
                    @foreach (var type in c.symbolTypes)
                    {
                        <InputRadio id="@type" class="btn-check" Value="@type" checked="@(search.SymbolType.Equals(@type))"/>
                        <label class="btn btn-outline-primary" for="@type">@type</label>
                    }
                </InputRadioGroup>
            </div>
        </div>
          <div class="form-group col-auto">
           <label for="timeZone">
               <small class="form-text text-muted">
                  Your TimeZone
                </small>
           </label>
            <BlazoredTypeahead id="timeZone" class="form-control" SearchMethod="c.SearchTimeZones" @bind-Value="c.config.TimeZone">
                <SelectedTemplate Context="TimeZoneContext">
                    @TimeZoneContext
                </SelectedTemplate>
                <ResultTemplate Context="TimeZoneContext">
                    @TimeZoneContext
                </ResultTemplate>
            </BlazoredTypeahead>
        </div> 
        <div class="form-group col-auto">
            <label for="interval">
                <small class="form-text text-muted">
                  Candle Width
                </small>
            </label>
            <div>
                <InputSelect id="interval" class="form-control" @bind-Value="c.config.Interval">
                    @foreach (var interval in c.Intervals)
                    {
                        <option value="@interval.Item1" selected="@(c.config.Interval.Equals(interval))">@interval.Item2</option>
                    }
                </InputSelect>
            </div>
        </div>
         <div class="col-auto">
            <label for="showDetails">
                <small class="form-text text-muted">
                  Show Symbol Details
                </small>
            </label>
            <InputCheckbox id="showDetails" @bind-Value="c.config.ShowDetails" class="form-control"/>
        </div>
         <div class="col-auto">
            <label for="indicators">
                <small class="form-text text-muted">
                  Indicators
                </small>
            </label>
            <div>
                <InputSelect id="indicators" class="form-control" @bind-Value="c.config.Indicators" multiple="multiple">
                    @foreach (var indicator in c.Indicators)
                    {
                        <option value="@indicator" selected="@(c.config.Indicators.Contains(indicator))">@indicator.Replace("@tv-basicstudies","")</option>
                    }
                </InputSelect>
            </div>
        </div>
    </div>
    <div> 
        <label for="navigate">
            <small class="form-text text-muted">
                Go to a URL
            </small>
        </label>
        <InputText @bind-Value="navUrl" id="navigate"/>
        <button @onclick="Navigate">Navigate</button>
    </div>
    <div> 
        <label for="sleep">
            <small class="form-text text-muted">
                Sleep/Wake the screen
            </small>
        </label>
        <InputCheckbox @bind-Value="Sleep" id="sleep"/>
    </div>
<Chart/>
</EditForm>    
@code{

    bool sleep  = false;
    bool Sleep 
    { 
        get => sleep; 
        set => ShellHelper.LinuxSleepScreen(sleep = value); 
    }

    string navUrl = string.Empty;
    async Task Navigate()
    {
        if(Uri.TryCreate(navUrl, new UriCreationOptions(), out var uri))
        {
            await c.Navigate(uri);
        }
    }
}